$.fn.countDown = function (options, callback) {
    var _self = this;
    var defaults = {
        times: "",
        system_time: "",
        days: true,
        Hour: true,
        ms: false,
        msValue: 90,
        unit: {days: ":", hour: ":", min: ":", second: ""}
    };
    var endOptions = $.extend(defaults, options, callback);

    function demo() {
        console.log("倒计时结束")
    }

    var Fn = callback || demo;
    if (!endOptions.times) {
        console.error("times值必填")
    } else {
        function timeFn() {
            if (endOptions.system_time == "") {
                this.time = new Date().getTime()
            } else {
                this.time = new Date(endOptions.system_time).getTime()
            }
            if (typeof(endOptions.times) == "number") {
                this.End_time = new Date().getTime() + endOptions.times * 60 * 1000
            } else {
                this.End_time = new Date(endOptions.times).getTime()
            }
        }

        timeFn.prototype = {
            Init: function () {
                if (endOptions.ms) {
                    this.time += endOptions.msValue
                } else {
                    this.time += 1000
                }
                this.time_diff = (this.End_time - this.time);
                this.days = parseInt(this.time_diff / (1000 * 60 * 60 * 24));
                this.Hours = parseInt(this.time_diff / (1000 * 60 * 60));
                this.Minutes = parseInt(this.time_diff / (1000 * 60));
                this.Seconds = (this.time_diff / 1000) % 60;
                this.showText()
            }, AddZero: function (x) {
                if (x < 10) {
                    return x = "0" + x
                } else {
                    return x
                }
            }, special: function (e, de) {
                if (e == undefined) {
                    return e = de
                } else {
                    return e
                }
            }, showText: function () {
                if (endOptions.ms) {
                    if (endOptions.days) {
                        _self.html('<span class="Days_val">' + this.AddZero(this.days) + "</span>" + '<span class="Days_unit">' + this.special(endOptions.unit.days, ":") + "</span>" + '<span class="Hour_val">' + this.AddZero(this.Hours % 24) + "</span>" + '<span class="Hour_unit">' + this.special(endOptions.unit.hour, ":") + "</span>" + '<span class="Min_val">' + this.AddZero(this.Minutes % 60) + "</span>" + '<span class="Min_unit">' + this.special(endOptions.unit.min, ":") + "</span>" + '<span class="Second_val">' + this.AddZero(this.Seconds.toFixed(3)) + "</span>" + '<span class="second_unit">' + this.special(endOptions.unit.second, "") + "</span>")
                    } else {
                        if (endOptions.Hour) {
                            _self.html('<span class="Hour_val">' + this.AddZero(this.Hours) + "</span>" + '<span class="Hour_unit">' + this.special(endOptions.unit.hour, ":") + "</span>" + '<span class="Min_val">' + this.AddZero(this.Minutes % 60) + "</span>" + '<span class="Min_unit">' + this.special(endOptions.unit.min, ":") + "</span>" + '<span class="Second_val">' + this.AddZero(this.Seconds.toFixed(3)) + "</span>" + '<span class="second_unit">' + this.special(endOptions.unit.second, "") + "</span>")
                        } else {
                            _self.html('<span class="Min_val">' + this.AddZero(this.Minutes % 60) + "</span>" + '<span class="Min_unit">' + this.special(endOptions.unit.min, ":") + "</span>" + '<span class="Second_val">' + this.AddZero(this.Seconds.toFixed(3)) + "</span>" + '<span class="second_unit">' + this.special(endOptions.unit.second, "") + "</span>")
                        }
                    }
                } else {
                    if (endOptions.days) {
                        _self.html('<span class="Days_val">' + this.AddZero(this.days) + "</span>" + '<span class="Days_unit">' + this.special(endOptions.unit.days, ":") + "</span>" + '<span class="Hour_val">' + this.AddZero(this.Hours % 24) + "</span>" + '<span class="Hour_unit">' + this.special(endOptions.unit.hour, ":") + "</span>" + '<span class="Min_val">' + this.AddZero(this.Minutes % 60) + "</span>" + '<span class="Min_unit">' + this.special(endOptions.unit.min, ":") + "</span>" + '<span class="Second_val">' + this.AddZero(parseInt(this.Seconds)) + "</span>" + '<span class="second_unit">' + this.special(endOptions.unit.second, "") + "</span>")
                    } else {
                        if (endOptions.Hour) {
                            _self.html('<span class="Hour_val">' + this.AddZero(this.Hours) + "</span>" + '<span class="Hour_unit">' + this.special(endOptions.unit.hour, ":") + "</span>" + '<span class="Min_val">' + this.AddZero(this.Minutes % 60) + "</span>" + '<span class="Min_unit">' + this.special(endOptions.unit.min, ":") + "</span>" + '<span class="Second_val">' + this.AddZero(parseInt(this.Seconds)) + "</span>" + '<span class="second_unit">' + this.special(endOptions.unit.second, "") + "</span>")
                        } else {
                            _self.html('<span class="Min_val">' + this.AddZero(this.Minutes % 60) + "</span>" + '<span class="Min_unit">' + this.special(endOptions.unit.min, ":") + "</span>" + '<span class="Second_val">' + this.AddZero(parseInt(this.Seconds)) + "</span>" + '<span class="second_unit">' + this.special(endOptions.unit.second, "") + "</span>")
                        }
                    }
                }
                if (this.Hours <= 0 && this.Minutes <= 0 && this.Seconds <= 0) {
                    Fn();
                    clearInterval(this.ClearIn)
                }
            }, countFn: function () {
                var that = this;
                if (endOptions.ms) {
                    this.ClearIn = setInterval(this.Init.bind(this), endOptions.msValue)
                } else {
                    this.ClearIn = setInterval(function () {
                        that.Init()
                    }, 1000)
                }
            }, start: function () {
                this.Init();
                this.countFn()
            }
        };
        var game = new timeFn().start()
    }
};